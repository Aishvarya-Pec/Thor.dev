import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { prisma } from '@/lib/prisma'
import { deployToVercel, deployToNetlify, createGitHubRepo } from '@/lib/deployment'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { projectId, provider, config = {} } = body

    if (!projectId || !provider) {
      return NextResponse.json(
        { error: 'Project ID and provider are required' },
        { status: 400 }
      )
    }

    // Get project
    const project = await prisma.project.findFirst({
      where: {
        id: projectId,
        user: { email: session.user.email },
      },
    })

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 })
    }

    // Get user for GitHub token
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
    })

    let deploymentResult

    try {
      // Step 1: Create GitHub repository
      console.log(`ðŸ”§ Creating GitHub repository for project: ${project.name}`)
      const repoResult = await createGitHubRepo({
        projectPath: project.projectPath!,
        projectName: project.name,
        description: project.description || 'Generated by Thor.dev',
        githubToken: user?.githubToken || process.env.GITHUB_TOKEN!,
        isPrivate: !project.isPublic,
      })

      if (!repoResult.success) {
        return NextResponse.json(
          { error: `GitHub deployment failed: ${repoResult.error}` },
          { status: 500 }
        )
      }

      // Update project with repo URL
      await prisma.project.update({
        where: { id: projectId },
        data: { repoUrl: repoResult.repoUrl },
      })

      // Step 2: Deploy to chosen provider
      console.log(`ðŸš€ Deploying to ${provider}...`)
      
      if (provider === 'vercel') {
        deploymentResult = await deployToVercel({
          projectName: project.name,
          repoUrl: repoResult.repoUrl!,
          githubToken: user?.githubToken || process.env.GITHUB_TOKEN!,
          vercelToken: process.env.VERCEL_TOKEN!,
          config,
        })
      } else if (provider === 'netlify') {
        deploymentResult = await deployToNetlify({
          projectName: project.name,
          projectPath: project.projectPath!,
          repoUrl: repoResult.repoUrl!,
          netlifyToken: process.env.NETLIFY_TOKEN!,
          config,
        })
      } else {
        return NextResponse.json(
          { error: `Unsupported provider: ${provider}` },
          { status: 400 }
        )
      }

      if (!deploymentResult.success) {
        return NextResponse.json(
          { error: `${provider} deployment failed: ${deploymentResult.error}` },
          { status: 500 }
        )
      }

      // Update project with deployment info
      await prisma.project.update({
        where: { id: projectId },
        data: {
          status: 'deployed',
          deployUrl: deploymentResult.deployUrl,
          deployedAt: new Date(),
        },
      })

      console.log(`âœ… Project deployed successfully to ${provider}`)

      return NextResponse.json({
        success: true,
        repoUrl: repoResult.repoUrl,
        deployUrl: deploymentResult.deployUrl,
        provider,
      })

    } catch (error) {
      console.error('Deployment error:', error)
      return NextResponse.json(
        { error: 'Deployment failed' },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Deploy API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}