/**
 * Thor.dev Project Generator
 * Scaffolds full-stack Next.js applications with AI assistance
 */

import fs from 'fs/promises'
import path from 'path'
import { ProjectConfig, FileTree } from '@/types'

interface GenerationRequest {
  projectId: string
  projectName: string
  prompt: string
  config: ProjectConfig
  outputPath: string
}

interface GenerationResult {
  success: boolean
  files?: FileTree
  error?: string
}

// Template files for different project types
const TEMPLATES = {
  nextjs: {
    'package.json': (projectName: string, config: ProjectConfig) => `{
  "name": "${projectName.toLowerCase().replace(/[^a-z0-9]/g, '-')}",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"${config.database === 'sqlite' ? ',\n    "db:push": "prisma db push",\n    "db:generate": "prisma generate"' : ''}
  },
  "dependencies": {
    "next": "^14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "typescript": "^5.3.0"${config.styling === 'tailwind' ? ',\n    "tailwindcss": "^3.4.0",\n    "autoprefixer": "^10.4.16",\n    "postcss": "^8.4.32"' : ''}${config.database === 'sqlite' ? ',\n    "@prisma/client": "^5.7.0",\n    "prisma": "^5.7.0"' : ''}${config.auth === 'nextauth' ? ',\n    "next-auth": "^4.24.5",\n    "@next-auth/prisma-adapter": "^1.0.7"' : ''}
  },
  "devDependencies": {
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.0.4"
  }
}`,

    'next.config.js': () => `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig`,

    'tsconfig.json': () => `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`,

    'tailwind.config.js': (projectName: string, config: ProjectConfig) => config.styling === 'tailwind' ? `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
      },
    },
  },
  plugins: [],
}` : null,

    'postcss.config.js': (projectName: string, config: ProjectConfig) => config.styling === 'tailwind' ? `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}` : null,

    'src/app/globals.css': (projectName: string, config: ProjectConfig) => config.styling === 'tailwind' ? `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}` : `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`,

    'src/app/layout.tsx': (projectName: string, config: ProjectConfig) => `import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: '${projectName}',
  description: 'Generated by Thor.dev',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`,

    'src/app/page.tsx': (projectName: string, config: ProjectConfig) => `export default function Home() {
  return (
    <main className="${config.styling === 'tailwind' ? 'flex min-h-screen flex-col items-center justify-between p-24' : 'padding: 2rem'}">
      <div className="${config.styling === 'tailwind' ? 'z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex' : ''}">
        <h1 className="${config.styling === 'tailwind' ? 'text-4xl font-bold text-center' : ''}">
          Welcome to ${projectName}
        </h1>
        <p className="${config.styling === 'tailwind' ? 'text-lg text-gray-600 text-center mt-4' : ''}">
          This project was generated by Thor.dev
        </p>
      </div>
    </main>
  )
}`,

    'README.md': (projectName: string, config: ProjectConfig) => `# ${projectName}

This project was generated by [Thor.dev](https://thor.dev) - Multi-Agent Workspace for Epic Projects.

## Getting Started

First, install dependencies:

\`\`\`bash
npm install
# or
yarn install
# or
pnpm install
\`\`\`

${config.database === 'sqlite' ? `Then, set up the database:

\`\`\`bash
npm run db:generate
npm run db:push
\`\`\`

` : ''}Run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
# or
pnpm dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Features

- ⚡ Next.js 14 with App Router
- 🔷 TypeScript
${config.styling === 'tailwind' ? '- 🎨 Tailwind CSS\n' : ''}${config.database === 'sqlite' ? '- 🗄️ Prisma with SQLite\n' : ''}${config.auth === 'nextauth' ? '- 🔐 NextAuth.js Authentication\n' : ''}
## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [Thor.dev](https://thor.dev) - Multi-Agent Workspace

## Deploy

Deploy on Vercel, Netlify, or your preferred platform.

---

Generated with ❤️ by Thor.dev`,

    'prisma/schema.prisma': (projectName: string, config: ProjectConfig) => config.database === 'sqlite' ? `generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}` : null,

    '.env.example': (projectName: string, config: ProjectConfig) => `# Database
${config.database === 'sqlite' ? 'DATABASE_URL="file:./dev.db"' : '# DATABASE_URL="your-database-url"'}

${config.auth === 'nextauth' ? `# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret-here"

# OAuth Providers (optional)
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"` : ''}`,

    '.gitignore': () => `# Dependencies
node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Next.js
/.next/
/out/

# Production
/build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local
.env

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# Database
dev.db
dev.db-journal`,
  },
}

export async function generateProject(request: GenerationRequest): Promise<GenerationResult> {
  try {
    const { projectId, projectName, prompt, config, outputPath } = request

    // Create output directory
    await fs.mkdir(outputPath, { recursive: true })

    // Get template for the specified framework
    const template = TEMPLATES[config.framework as keyof typeof TEMPLATES] || TEMPLATES.nextjs

    const generatedFiles: FileTree = {}

    // Generate files from template
    for (const [filePath, generator] of Object.entries(template)) {
      if (typeof generator === 'function') {
        const content = generator(projectName, config)
        if (content) {
          const fullPath = path.join(outputPath, filePath)
          
          // Create directory if it doesn't exist
          await fs.mkdir(path.dirname(fullPath), { recursive: true })
          
          // Write file
          await fs.writeFile(fullPath, content)
          
          // Add to file tree
          generatedFiles[filePath] = {
            type: 'file',
            content,
            size: content.length,
            modified: new Date(),
          }
        }
      }
    }

    // Generate additional files based on AI prompt (simplified mock)
    const additionalFiles = await generateAIFiles(prompt, config)
    for (const [filePath, content] of Object.entries(additionalFiles)) {
      const fullPath = path.join(outputPath, filePath)
      
      await fs.mkdir(path.dirname(fullPath), { recursive: true })
      await fs.writeFile(fullPath, content)
      
      generatedFiles[filePath] = {
        type: 'file',
        content,
        size: content.length,
        modified: new Date(),
      }
    }

    console.log(`✅ Generated ${Object.keys(generatedFiles).length} files for project ${projectId}`)

    return {
      success: true,
      files: generatedFiles,
    }

  } catch (error) {
    console.error('Project generation error:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

async function generateAIFiles(prompt: string, config: ProjectConfig): Promise<Record<string, string>> {
  // Use AI services (Ollama, HuggingFace, etc.) for intelligent generation
  const { aiService } = await import('./ai-services')
  
  const files: Record<string, string> = {}

  try {
    console.log('🤖 Using AI services for intelligent code generation...')
    
    // Generate main component/page based on prompt
    const mainComponentResult = await aiService.generateCode({
      prompt: `Create a ${config.framework} application for: ${prompt}. 
               Generate the main page component with proper TypeScript types, 
               Tailwind CSS styling, and modern React patterns.`,
      language: 'typescript',
      framework: config.framework,
      context: `Project type: ${config.framework}, Features: ${config.features?.join(', ')}`,
    })

    if (mainComponentResult.success && mainComponentResult.content) {
      files['src/app/page.tsx'] = mainComponentResult.content
      console.log(`✅ Generated main component using ${mainComponentResult.provider}`)
    }

    // Generate additional components based on prompt keywords
    const keywords = prompt.toLowerCase()
    
    if (keywords.includes('dashboard') || keywords.includes('admin')) {
      const dashboardResult = await aiService.generateCode({
        prompt: `Create a comprehensive dashboard component with stats cards, charts, and data tables for: ${prompt}`,
        language: 'typescript',
        framework: config.framework,
        context: 'Dashboard application with modern UI components',
      })
      
      if (dashboardResult.success) {
        files['src/app/dashboard/page.tsx'] = dashboardResult.content
        console.log(`✅ Generated dashboard using ${dashboardResult.provider}`)
      }
    }

    if (keywords.includes('api') || keywords.includes('backend')) {
      const apiResult = await aiService.generateCode({
        prompt: `Create REST API endpoints for: ${prompt}. Include proper error handling, validation, and TypeScript types.`,
        language: 'typescript',
        framework: config.framework,
        context: 'Next.js API routes with proper structure',
      })
      
      if (apiResult.success) {
        files['src/app/api/main/route.ts'] = apiResult.content
        console.log(`✅ Generated API routes using ${apiResult.provider}`)
      }
    }

    if (keywords.includes('auth') || keywords.includes('login')) {
      const authResult = await aiService.generateCode({
        prompt: `Create authentication components and pages for: ${prompt}. Include login, signup, and protected routes.`,
        language: 'typescript',
        framework: config.framework,
        context: 'NextAuth.js authentication system',
      })
      
      if (authResult.success) {
        files['src/components/auth/login-form.tsx'] = authResult.content
        console.log(`✅ Generated auth components using ${authResult.provider}`)
      }
    }

    // Generate utility components
    const utilsResult = await aiService.generateCode({
      prompt: `Create utility functions and helpers for: ${prompt}. Include form validation, data formatting, and common utilities.`,
      language: 'typescript',
      framework: config.framework,
      context: 'Utility functions and helpers',
    })
    
    if (utilsResult.success) {
      files['src/lib/utils.ts'] = utilsResult.content
      console.log(`✅ Generated utilities using ${utilsResult.provider}`)
    }

  } catch (error) {
    console.warn('AI generation failed, falling back to templates:', error)
    
    // Fallback to enhanced template generation
    const { MockLLMService } = await import('./mock-services')
    const result = await MockLLMService.generateContent(prompt)
    if (result.success && result.content) {
      try {
        const generatedFiles = JSON.parse(result.content)
        Object.assign(files, generatedFiles)
      } catch (error) {
        console.warn('Failed to parse generated files, using basic fallback')
      }
    }
  }

  // Fallback: Simple keyword-based file generation
  if (Object.keys(files).length === 0) {
    if (prompt.toLowerCase().includes('dashboard') || prompt.toLowerCase().includes('admin')) {
    files['src/app/dashboard/page.tsx'] = `export default function Dashboard() {
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2">Stats</h2>
          <p className="text-gray-600">Your statistics here</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2">Recent Activity</h2>
          <p className="text-gray-600">Recent activity here</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2">Quick Actions</h2>
          <p className="text-gray-600">Quick actions here</p>
        </div>
      </div>
    </div>
  )
}`
  }

  if (prompt.toLowerCase().includes('blog') || prompt.toLowerCase().includes('post')) {
    files['src/app/blog/page.tsx'] = `export default function Blog() {
  return (
    <div className="max-w-4xl mx-auto p-8">
      <h1 className="text-4xl font-bold mb-8">Blog</h1>
      <div className="space-y-8">
        <article className="border-b pb-8">
          <h2 className="text-2xl font-semibold mb-2">
            <a href="/blog/first-post" className="hover:text-blue-600">
              Welcome to our blog
            </a>
          </h2>
          <p className="text-gray-600 mb-4">Published on {new Date().toLocaleDateString()}</p>
          <p className="text-gray-800">
            This is the first post on our blog. More content coming soon!
          </p>
        </article>
      </div>
    </div>
  )
}`

    files['src/app/blog/[slug]/page.tsx'] = `interface BlogPostProps {
  params: {
    slug: string
  }
}

export default function BlogPost({ params }: BlogPostProps) {
  return (
    <div className="max-w-4xl mx-auto p-8">
      <h1 className="text-4xl font-bold mb-4">Blog Post: {params.slug}</h1>
      <p className="text-gray-600 mb-8">Published on {new Date().toLocaleDateString()}</p>
      <div className="prose max-w-none">
        <p>This is a blog post about {params.slug}.</p>
        <p>Add your content here...</p>
      </div>
    </div>
  )
}`
  }

  if (prompt.toLowerCase().includes('contact') || prompt.toLowerCase().includes('form')) {
    files['src/app/contact/page.tsx'] = `'use client'

import { useState } from 'react'

export default function Contact() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle form submission
    console.log('Form submitted:', formData)
  }

  return (
    <div className="max-w-2xl mx-auto p-8">
      <h1 className="text-4xl font-bold mb-8">Contact Us</h1>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-2">
            Name
          </label>
          <input
            type="text"
            id="name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium mb-2">
            Email
          </label>
          <input
            type="email"
            id="email"
            value={formData.email}
            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <div>
          <label htmlFor="message" className="block text-sm font-medium mb-2">
            Message
          </label>
          <textarea
            id="message"
            value={formData.message}
            onChange={(e) => setFormData({ ...formData, message: e.target.value })}
            rows={5}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Send Message
        </button>
      </form>
    </div>
  )
}`
  }

  return files
}